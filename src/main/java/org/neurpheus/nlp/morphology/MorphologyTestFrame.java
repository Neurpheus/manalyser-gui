/*
 * MorphologyTestFrame.java
 *
 * Created on 5 paüdziernik 2006, 08:58
 */
package org.neurpheus.nlp.morphology;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileFilter;
import javax.xml.parsers.ParserConfigurationException;
import org.neurpheus.classification.neuralnet.xml.XmlNeuralNetwork;
import org.neurpheus.core.io.FilePath2Object;
import org.neurpheus.nlp.morphology.builder.MorphologicalAnalyserBuilder;
import org.neurpheus.nlp.morphology.builder.NeuralNetworkLearningProperties;
import org.neurpheus.nlp.morphology.hypergraph.InflectionHypergraph;
import org.neurpheus.nlp.morphology.impl.MorphologicalAnalyserImpl;
import org.neurpheus.nlp.morphology.tagset.GrammaticalProperties;
import org.xml.sax.SAXException;

/**
 * User interface for a morphological ananlyser testing.
 *
 * @author  Jakub Strychowski
 */
public class MorphologyTestFrame extends javax.swing.JFrame {

    public static String dirPath = "N:\\data\\dictionaries\\";
    public static String DELIMETERS = " \t\r\n!?.,;:'\"/\\|[]{}()+=!@#$%^&*~`<>-Ñî";
    
    public static String DEFAULT_NEURAL_NETWORK_RESOURCE = "resources/default-neural-network.ann";
    
    private MorphologicalAnalyserImpl analyser = null;
    
    private XmlNeuralNetwork neuralNetworkArchitecture;

    /** Creates new form MorphologyTestFrame */
    public MorphologyTestFrame() {
        initComponents();
        openDefaultNeuralNetwork();
        redirectSystemStreams();
    }

    private void updateTextArea(final String text) {
      SwingUtilities.invokeLater(new Runnable() {
        public void run() {
          jConsoleArea.append(text);
        }
      });
    }

    private void redirectSystemStreams() {
      OutputStream out = new OutputStream() {
        @Override
        public void write(int b) throws IOException {
          updateTextArea(String.valueOf((char) b));
        }

        @Override
        public void write(byte[] b, int off, int len) throws IOException {
          updateTextArea(new String(b, off, len));
        }

        @Override
        public void write(byte[] b) throws IOException {
          write(b, 0, b.length);
        }
      };

      System.setOut(new PrintStream(out, true));
      System.setErr(new PrintStream(out, true));
    }

    public XmlNeuralNetwork getNeuralNetworkArchitecture() {
        return neuralNetworkArchitecture;
    }

    public void setNeuralNetworkArchitecture(XmlNeuralNetwork neuralNetworkArchitecture) {
        this.neuralNetworkArchitecture = neuralNetworkArchitecture;
    }

    public class AnanlyserFileFilter extends FileFilter {

        private String description;
        private String[] extensions;

        public AnanlyserFileFilter(String desc, String[] ext) {
            description = desc;
            extensions = ext;
        }

        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }
            String fileName = f.getName();
            for (int i = 0; i < extensions.length; i++) {
                if (fileName.endsWith(extensions[i])) {
                    return true;
                }
            }
            return false;
        }

        public String getDescription() {
            return description;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jAnanlyserPath = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jOpenAnanlyserButton = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jWordForm = new javax.swing.JTextField();
        jAnalyseButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jAnanlysisResult = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jSourceText = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAnalysisResult = new javax.swing.JTextArea();
        jAnalyseMultilineTextButton = new javax.swing.JButton();
        jShowOnlyUncertainResults = new javax.swing.JCheckBox();
        jSpeed = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jBaseForm = new javax.swing.JTextField();
        jGenerate = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        jGrammaticalProperties = new javax.swing.JTextField();
        jGeneratedForm = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jHypergraph = new javax.swing.JButton();
        jUseNeuralNetwork = new javax.swing.JCheckBox();
        jUseBaseFormsDictionary = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jDictionaryPath = new javax.swing.JTextField();
        jOpenDirectoryButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxFromStep = new javax.swing.JComboBox();
        jComboBoxToStep = new javax.swing.JComboBox();
        jBuildButton = new javax.swing.JButton();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel10 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jMaximumNumberOfTrainingExamples = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLearningFactor = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLearningFactorMultipler = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLearningFactorMultipler2 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jNumberOfEpochs = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jMomentuFactor = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLearningAlgorithm = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jMaxJumpFactor = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jWeightsAmplitude = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jMimimumErrorValue = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jClassifyInputs = new javax.swing.JCheckBox();
        jLabel22 = new javax.swing.JLabel();
        jNumberOfTestExamples = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jArchitectureName = new javax.swing.JTextArea();
        jOpenArchitecture = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jArchitectureDescription = new javax.swing.JTextArea();
        jLabel26 = new javax.swing.JLabel();
        jLocale = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        jConsoleArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Neurpheus - Morphological Analysis Tester");

        jLabel1.setText("Ananlyser path:");

        jAnanlyserPath.setEditable(false);
        jAnanlyserPath.setText("N:\\data\\dictionaries\\full_pl_PL.dic");

        jOpenAnanlyserButton.setText("Open analyser");
        jOpenAnanlyserButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onOpenAnalyser(evt);
            }
        });
        jOpenAnanlyserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenAnanlyserButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Ananlysed word form:");

        jAnalyseButton.setText("Analyse");
        jAnalyseButton.setEnabled(false);
        jAnalyseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jAnalyseButtonMouseClicked(evt);
            }
        });
        jAnalyseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAnalyseButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Ananlysis result:");

        jAnanlysisResult.setColumns(20);
        jAnanlysisResult.setFont(new java.awt.Font("Arial", 0, 10));
        jAnanlysisResult.setRows(5);
        jScrollPane1.setViewportView(jAnanlysisResult);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel3)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jWordForm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 261, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jAnalyseButton))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jWordForm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jAnalyseButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel3)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Single word", jPanel3);

        jSplitPane1.setDividerLocation(300);

        jLabel7.setText("Source text:");

        jSourceText.setColumns(20);
        jSourceText.setRows(5);
        jScrollPane2.setViewportView(jSourceText);

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                    .add(jLabel7))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel7)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel5);

        jLabel8.setText("Result:");

        jTextAnalysisResult.setColumns(20);
        jTextAnalysisResult.setRows(5);
        jScrollPane3.setViewportView(jTextAnalysisResult);

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .add(jLabel8))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel6);

        jAnalyseMultilineTextButton.setText("Analyse");
        jAnalyseMultilineTextButton.setEnabled(false);
        jAnalyseMultilineTextButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jAnalyseMultilineTextButtonMouseClicked(evt);
            }
        });
        jAnalyseMultilineTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAnalyseMultilineTextButtonActionPerformed(evt);
            }
        });
        jAnalyseMultilineTextButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jAnalyseMultilineTextButtonKeyReleased(evt);
            }
        });

        jShowOnlyUncertainResults.setText("Show only uncertain results");
        jShowOnlyUncertainResults.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jShowOnlyUncertainResults.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jSpeed.setText("Speed:");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 747, Short.MAX_VALUE)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jShowOnlyUncertainResults)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 489, Short.MAX_VALUE)
                        .add(jSpeed)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jAnalyseMultilineTextButton)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jAnalyseMultilineTextButton)
                        .add(jShowOnlyUncertainResults))
                    .add(jSpeed))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Multiline text", jPanel4);

        jLabel23.setText("Base word form:");

        jGenerate.setText("Generate");
        jGenerate.setEnabled(false);
        jGenerate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jGenerateMouseClicked(evt);
            }
        });
        jGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGenerateActionPerformed(evt);
            }
        });

        jLabel24.setText("Grammatical properties:");

        jGeneratedForm.setEnabled(false);

        jLabel25.setText("Generated form:");

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel23)
                    .add(jLabel25)
                    .add(jLabel24))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jGeneratedForm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 261, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel8Layout.createSequentialGroup()
                        .add(jBaseForm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 261, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jGenerate))
                    .add(jGrammaticalProperties, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 261, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(295, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel23)
                    .add(jBaseForm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jGenerate))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jGrammaticalProperties, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel24))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jGeneratedForm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel25))
                .addContainerGap(289, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Generator", jPanel8);

        jHypergraph.setText("Hypergraph");
        jHypergraph.setEnabled(false);
        jHypergraph.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onHypergraph(evt);
            }
        });
        jHypergraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jHypergraphActionPerformed(evt);
            }
        });

        jUseNeuralNetwork.setSelected(true);
        jUseNeuralNetwork.setText("Use neural network");
        jUseNeuralNetwork.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jUseNeuralNetwork.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jUseBaseFormsDictionary.setSelected(true);
        jUseBaseFormsDictionary.setText("Use base forms dictionary");
        jUseBaseFormsDictionary.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jUseBaseFormsDictionary.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jTabbedPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 772, Short.MAX_VALUE)
                    .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 772, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jAnanlyserPath, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jOpenAnanlyserButton))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jUseNeuralNetwork)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jUseBaseFormsDictionary)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 425, Short.MAX_VALUE)
                        .add(jHypergraph))
                    .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 630, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jOpenAnanlyserButton)
                    .add(jAnanlyserPath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jHypergraph)
                    .add(jUseNeuralNetwork)
                    .add(jUseBaseFormsDictionary))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTabbedPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Ananlysis", jPanel1);

        jLabel4.setText("Dictionary path:");

        jDictionaryPath.setEditable(false);

        jOpenDirectoryButton.setText("Open dictionary");
        jOpenDirectoryButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jOpenDirectoryButtononOpenAnalyser(evt);
            }
        });
        jOpenDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenDirectoryButtonActionPerformed(evt);
            }
        });
        jOpenDirectoryButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jOpenDirectoryButtonKeyTyped(evt);
            }
        });

        jLabel5.setText("From step:");

        jLabel6.setText("To step:");

        jComboBoxFromStep.setMaximumRowCount(10);
        jComboBoxFromStep.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Generate Full Dictionary", "Create Inflection Patterns Base", "Print Morphemes Statistics", "TagInflectionPatterns", "Determine Core Patterns", "Create Analyser", "Create Training Set", "Learn Neural Network", "Create Jar Package", "Test Analyser" }));
        jComboBoxFromStep.setSelectedIndex(5);
        jComboBoxFromStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFromStepActionPerformed(evt);
            }
        });

        jComboBoxToStep.setMaximumRowCount(10);
        jComboBoxToStep.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Generate Full Dictionary", "Create Inflection Patterns Base", "Print Morphemes Statistics", "TagInflectionPatterns", "Determine Core Patterns", "Create Analyser", "Create Training Set", "Learn Neural Network", "Create Jar Package", "Test Analyser" }));
        jComboBoxToStep.setSelectedIndex(5);

        jBuildButton.setText("Build");
        jBuildButton.setEnabled(false);
        jBuildButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBuildButtonMouseClicked(evt);
            }
        });
        jBuildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBuildButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("Number of epochs:");

        jLabel12.setText("Maximum number of training examples for an epoch:");

        jMaximumNumberOfTrainingExamples.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jMaximumNumberOfTrainingExamples.setText("25000");

        jLabel13.setText("Learning factor:");

        jLearningFactor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jLearningFactor.setText("0.9");

        jLabel14.setText("Learning factor multipler:");

        jLearningFactorMultipler.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jLearningFactorMultipler.setText("1.0");

        jLabel15.setText("-");

        jLearningFactorMultipler2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jLearningFactorMultipler2.setText("5");
        jLearningFactorMultipler2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLearningFactorMultipler2ActionPerformed(evt);
            }
        });

        jLabel16.setText("/ number of epochs");

        jNumberOfEpochs.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jNumberOfEpochs.setText("20");

        jLabel17.setText("Momentum factor:");

        jMomentuFactor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jMomentuFactor.setText("0.55");

        jLabel18.setText("Learning algorithm:");

        jLearningAlgorithm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Backpropagation - online", "Backpropagation - offline (batch)", "Quickprop" }));

        jLabel10.setText("Max jump factor for Quickprop algorithm");

        jMaxJumpFactor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jMaxJumpFactor.setText("1.75");

        jLabel19.setText("Weights amplitude:");

        jWeightsAmplitude.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jWeightsAmplitude.setText("0.1");

        jLabel20.setText("Minimum error value");

        jMimimumErrorValue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jMimimumErrorValue.setText("0.1");

        jLabel21.setText("Learn outputs for active inputs (classification mode):");

        jLabel22.setText("Number of test examples:");

        jNumberOfTestExamples.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jNumberOfTestExamples.setText("5000");

        org.jdesktop.layout.GroupLayout jPanel10Layout = new org.jdesktop.layout.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel12)
                    .add(jLabel11)
                    .add(jLabel13)
                    .add(jLabel14)
                    .add(jLabel17)
                    .add(jLabel19)
                    .add(jLabel10)
                    .add(jLabel20)
                    .add(jLabel21)
                    .add(jLabel18))
                .add(23, 23, 23)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLearningAlgorithm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 260, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel10Layout.createSequentialGroup()
                            .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jMomentuFactor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                                .add(jLearningFactorMultipler, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                                .add(jLearningFactor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                                .add(jNumberOfEpochs, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                                .add(jMaximumNumberOfTrainingExamples, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                                .add(jWeightsAmplitude, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                                .add(jMaxJumpFactor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, jMimimumErrorValue, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))
                            .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jPanel10Layout.createSequentialGroup()
                                    .add(23, 23, 23)
                                    .add(jLabel15)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(jLearningFactorMultipler2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(jLabel16))
                                .add(jPanel10Layout.createSequentialGroup()
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(jLabel22)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(jNumberOfTestExamples, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 51, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .add(jClassifyInputs)))
                .add(222, 222, 222))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel18)
                    .add(jLearningAlgorithm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(jMaximumNumberOfTrainingExamples, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel22)
                    .add(jNumberOfTestExamples, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11)
                    .add(jNumberOfEpochs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel13)
                    .add(jLearningFactor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(jLearningFactorMultipler, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel15)
                    .add(jLearningFactorMultipler2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel16))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel17)
                    .add(jMomentuFactor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel19)
                    .add(jWeightsAmplitude, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(jMaxJumpFactor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel20)
                    .add(jMimimumErrorValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel21)
                    .add(jClassifyInputs))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Neural Network Properties", jPanel10);

        jLabel9.setText("Architecture:");

        jArchitectureName.setBackground(new java.awt.Color(255, 255, 204));
        jArchitectureName.setColumns(20);
        jArchitectureName.setFont(new java.awt.Font("Tahoma", 1, 11));
        jArchitectureName.setRows(1);
        jArchitectureName.setText("Please open a file with a neural network architecture.");
        jArchitectureName.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jArchitectureName.setEnabled(false);
        jScrollPane5.setViewportView(jArchitectureName);

        jOpenArchitecture.setText("Open architecture...");
        jOpenArchitecture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenArchitectureActionPerformed(evt);
            }
        });

        jArchitectureDescription.setBackground(new java.awt.Color(255, 255, 204));
        jArchitectureDescription.setColumns(20);
        jArchitectureDescription.setRows(5);
        jArchitectureDescription.setText("Please open a file with a neural network architecture.");
        jArchitectureDescription.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jArchitectureDescription.setEnabled(false);
        jScrollPane4.setViewportView(jArchitectureDescription);

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel9)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jOpenArchitecture)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jOpenArchitecture)
                    .add(jLabel9))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 248, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Neural Network Architecture", jPanel7);

        jLabel26.setText("Locale:");

        jConsoleArea.setColumns(20);
        jConsoleArea.setFont(new java.awt.Font("Courier New", 0, 10)); // NOI18N
        jConsoleArea.setRows(5);
        jScrollPane6.setViewportView(jConsoleArea);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jTabbedPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 772, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel6)
                            .add(jLabel5)
                            .add(jLabel4))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jDictionaryPath, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jOpenDirectoryButton))
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jComboBoxFromStep, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(jLabel26)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLocale, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jComboBoxToStep, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jBuildButton)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jOpenDirectoryButton)
                    .add(jDictionaryPath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(jComboBoxFromStep, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel26)
                    .add(jLocale, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel6)
                    .add(jComboBoxToStep, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTabbedPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 311, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                    .add(jBuildButton))
                .addContainerGap())
        );

        jTabbedPane3.getAccessibleContext().setAccessibleName("Neural Network Properties");

        jTabbedPane1.addTab("Build", jPanel2);

        jTabbedPane1.setSelectedIndex(1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jAnalyseMultilineTextButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jAnalyseMultilineTextButtonMouseClicked
        analyser.setUseNeuralNetwork(jUseNeuralNetwork.isSelected());
        analyser.setUseBaseFormsDictionary(jUseBaseFormsDictionary.isSelected());
        String text = jSourceText.getText();
        StringTokenizer tokenizer = new StringTokenizer(text, DELIMETERS, false);
        StringBuffer output = new StringBuffer();
        tokenizer.hasMoreElements();
        long startTime = System.currentTimeMillis();
        int counter = 0;
        while (tokenizer.hasMoreTokens()) {
            String token = tokenizer.nextToken();
            if (token.length() > 0) {
                counter++;
                List result = Collections.EMPTY_LIST;
                try {
                    result = analyser.analyse2list(token);
                } catch (MorphologyException ex) {
                    Logger.getLogger(MorphologyTestFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (result.size() > 0) {
                    boolean show = true;
                    if (jShowOnlyUncertainResults.isSelected()) {
                        MorphologicalAnalysisResult mres = (MorphologicalAnalysisResult) result.get(0);
                        show = !mres.isCertain();
                    }
                    if (show) {
                        output.append(token);
                        output.append(" :");
                        for (final Iterator it = result.iterator(); it.hasNext();) {
                            MorphologicalAnalysisResult mres = (MorphologicalAnalysisResult) it.next();
                            String mrestxt = mres.toString();
                            output.append("\r\n ");
                            output.append(mrestxt);
                        }
                        output.append("\r\n\r\n");
                    }
                }
            }
        }
        long interval = System.currentTimeMillis() - startTime;
        double speed = interval == 0 ? Double.MAX_VALUE : counter * 1000.0 / interval;
        jSpeed.setText("Speed : " + speed + " words/s");

        jTextAnalysisResult.setText(output.toString());
    }//GEN-LAST:event_jAnalyseMultilineTextButtonMouseClicked

    private void jAnalyseMultilineTextButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jAnalyseMultilineTextButtonKeyReleased
// TODO add your handling code here:
    }//GEN-LAST:event_jAnalyseMultilineTextButtonKeyReleased

    private void jAnalyseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jAnalyseButtonMouseClicked

    }//GEN-LAST:event_jAnalyseButtonMouseClicked

    private void onHypergraph(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onHypergraph

    }//GEN-LAST:event_onHypergraph

    private void jBuildButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBuildButtonMouseClicked

    }//GEN-LAST:event_jBuildButtonMouseClicked

    private void jOpenDirectoryButtononOpenAnalyser(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jOpenDirectoryButtononOpenAnalyser
        
    }//GEN-LAST:event_jOpenDirectoryButtononOpenAnalyser

    private void onOpenAnalyser(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onOpenAnalyser

    }//GEN-LAST:event_onOpenAnalyser

    private void jOpenDirectoryButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jOpenDirectoryButtonKeyTyped
    // TODO add your handling code here:
    }//GEN-LAST:event_jOpenDirectoryButtonKeyTyped

    private void jOpenDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenDirectoryButtonActionPerformed
        JFileChooser fch = new JFileChooser();
        while (dirPath.endsWith(File.separator)) {
            dirPath = dirPath.substring(0, dirPath.length() - 1);
        }
        fch.setCurrentDirectory(new File(dirPath));
        fch.setDialogTitle("Select MySpell dictionary file");
        fch.setFileFilter(new AnanlyserFileFilter("MySpell dictionary file (*.dic)", new String[]{".dic"}));
        if (fch.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File f = fch.getSelectedFile();
            String path = f.getAbsolutePath();
            jDictionaryPath.setText(path);
            String name = f.getName();
            if (name.length() >= 6 && name.endsWith(".dic")) {
                name = name.substring(0, name.length() - 4);
                String localeCode = "";
                String languageCode = name.substring(0, 2);
                String[] languages = Locale.getISOLanguages();
                boolean matches = false;
                for (int i = 0; i < languages.length && !matches; i++) {
                    if (languageCode.equals(languages[i])) {
                        matches = true;
                        localeCode = languageCode;
                    }
                }
                matches &= name.length() == 2 || name.charAt(2) == '_';
                if (matches) {
                    String countryCode = null;
                    if (name.length() >= 5 && name.charAt(2) == '_') {
                        countryCode = name.substring(3, 5);
                        String[] countries = Locale.getISOCountries();
                        matches = false;
                        for (int i = 0; i < countries.length && !matches; i++) {
                            if (countryCode.equals(countries[i])) {
                                matches = true;
                                localeCode = localeCode + "_" + countryCode;
                            }
                        }
                    }
                }
                if (!matches) {
                    localeCode = "pl_PL";
                }
                jLocale.setText(localeCode);
            }
            jBuildButton.setEnabled(true);
        }

    }//GEN-LAST:event_jOpenDirectoryButtonActionPerformed

        private void jBuildButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBuildButtonActionPerformed
            String dictionaryPath = jDictionaryPath.getText();
            int poz = dictionaryPath.lastIndexOf(File.separator);
            String fileName = dictionaryPath.substring(poz + 1);
            dictionaryPath = dictionaryPath.substring(0, poz + 1);
            String symbol = fileName.substring(0, fileName.length() - 4);
            String locStr = jLocale.getText();
            String languageCode = locStr.substring(0, 2);
            poz = locStr.indexOf('_');
            Locale language;
            if (poz == 2) {
                String countryCode = locStr.substring(3, 5);
                language = new Locale(languageCode, countryCode);
            } else {
                language = new Locale(languageCode);
            }
            int from = jComboBoxFromStep.getSelectedIndex();
            int to = jComboBoxToStep.getSelectedIndex();
            // set learning properties for neural network
            NeuralNetworkLearningProperties nnp = MorphologicalAnalyserBuilder.getNeuralNetworkLearningProperties();
            nnp.setArchitecture(getNeuralNetworkArchitecture());
            nnp.setLearningAlgorithm(jLearningAlgorithm.getSelectedIndex());
            nnp.setNumberOfEpochs(Integer.parseInt(jNumberOfEpochs.getText()));
            nnp.setMaximumNumberOfTrainingExamples(Integer.parseInt(jMaximumNumberOfTrainingExamples.getText()));
            nnp.setLearningFactor(Double.parseDouble(jLearningFactor.getText()));
            nnp.setLearningFactorMultipler(Double.parseDouble(jLearningFactorMultipler.getText()));
            nnp.setLearningFactorMultiplerByNumberOfEpochs(Double.parseDouble(jLearningFactorMultipler2.getText()));
            nnp.setMomentumFactor(Double.parseDouble(jMomentuFactor.getText()));
            nnp.setMaxJumpFactor(Double.parseDouble(jMaxJumpFactor.getText()));
            nnp.setWeightsAmplitude(Double.parseDouble(jWeightsAmplitude.getText()));
            nnp.setMimimumErrorValue(Double.parseDouble(jMimimumErrorValue.getText()));
            nnp.setClassificationMode(jClassifyInputs.isSelected());
            nnp.setNumberOfTestExamples(Integer.parseInt(jNumberOfTestExamples.getText()));
            MorphologicalAnalyserBuilder.processLanguage(dictionaryPath, symbol, language, from, to);
        }//GEN-LAST:event_jBuildButtonActionPerformed

        private void jOpenAnanlyserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenAnanlyserButtonActionPerformed
            JFileChooser fch = new JFileChooser();
            while (dirPath.endsWith(File.separator)) {
                dirPath = dirPath.substring(0, dirPath.length() - 1);
            }
            fch.setCurrentDirectory(new File(dirPath));
            fch.setDialogTitle("Select morphological ananlyser file.");
            fch.setFileFilter(new AnanlyserFileFilter("Morphological ananlysers (*.ana, *.anz)", new String[]{".ana", ".anz"}));
            if (fch.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File f = fch.getSelectedFile();
                String path = f.getAbsolutePath();
                jAnanlyserPath.setText(path);
                jAnalyseButton.setEnabled(false);
                jHypergraph.setEnabled(false);
                try {
                    analyser = (MorphologicalAnalyserImpl) FilePath2Object.readObject(path, path.endsWith(".anz"));
                    jAnalyseButton.setEnabled(true);
                    jGenerate.setEnabled(true);
                    jHypergraph.setEnabled(true);
                    jAnalyseMultilineTextButton.setEnabled(true);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Cannot open morphological analyser", JOptionPane.ERROR_MESSAGE);
                }
            }
        }//GEN-LAST:event_jOpenAnanlyserButtonActionPerformed

        private void jHypergraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jHypergraphActionPerformed
            if (analyser != null) {
                InflectionHypergraph ih = new InflectionHypergraph(analyser.getTree(), analyser.getIpb().getInflectionPatternsMap());
                ih.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                ih.setVisible(true);
            }
        }//GEN-LAST:event_jHypergraphActionPerformed

        private void jAnalyseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAnalyseButtonActionPerformed
            String wordForm = jWordForm.getText();
            try {
                analyser.setUseNeuralNetwork(jUseNeuralNetwork.isSelected());
                analyser.setUseBaseFormsDictionary(jUseBaseFormsDictionary.isSelected());
                List result = analyser.analyse2list(wordForm);
                StringBuffer buffer = new StringBuffer();
                for (final Iterator it = result.iterator(); it.hasNext();) {
                    buffer.append(it.next().toString());
                    buffer.append("\n");
                }
                jAnanlysisResult.setText(buffer.toString());
            } catch (Throwable e) {
                e.printStackTrace();
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                e.printStackTrace(pw);
                pw.flush();
                jAnanlysisResult.setText(sw.toString());
                pw.close();
            }
        }//GEN-LAST:event_jAnalyseButtonActionPerformed

        private void openDefaultNeuralNetwork() {
            InputStream in = null;
            try {
                in = MorphologyTestFrame.class.getClassLoader().getResourceAsStream(DEFAULT_NEURAL_NETWORK_RESOURCE);
                openNeuralNetwork(in);
            } catch (Exception ex) {
                Logger.getLogger(MorphologyTestFrame.class.getName()).log(Level.SEVERE, "Cannot open default neural network from resource " + DEFAULT_NEURAL_NETWORK_RESOURCE, ex);
            } finally {
                if (in != null) {
                try {
                    in.close();
                } catch (IOException ex) {
                    Logger.getLogger(MorphologyTestFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
            }
        }
        
        private void openNeuralNetwork(final InputStream in) throws ParserConfigurationException, SAXException, IOException  {
            XmlNeuralNetwork nn = XmlNeuralNetwork.read(in);
            neuralNetworkArchitecture = nn;
            jArchitectureName.setText(nn.getName().trim());
            jArchitectureDescription.setText(nn.getDescription().trim());
        }
        
        private void openNerualNetwork(final String path)  {
            InputStream in = null;
            try {
                in = new BufferedInputStream(new FileInputStream(new File(path)));
                openNeuralNetwork(in);
            } catch (Exception ex) {
                Logger.getLogger(MorphologyTestFrame.class.getName()).log(Level.SEVERE, "Cannot open neural network from file " + path, ex);
            } finally {
                if (in != null) {
                try {
                    in.close();
                } catch (IOException ex) {
                    Logger.getLogger(MorphologyTestFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
            }
        }
        
        private void jOpenArchitectureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenArchitectureActionPerformed
            JFileChooser fch = new JFileChooser();
            while (dirPath.endsWith(File.separator)) {
                dirPath = dirPath.substring(0, dirPath.length() - 1);
            }
            fch.setCurrentDirectory(new File(dirPath));
            fch.setDialogTitle("Select a file with Neural Network Architecture definition");
            fch.setFileFilter(new AnanlyserFileFilter("Artificail neural network file (*.ann)", new String[]{".ann"}));
            if (fch.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File f = fch.getSelectedFile();
                String path = f.getAbsolutePath();
                openNerualNetwork(path);
            }
        }//GEN-LAST:event_jOpenArchitectureActionPerformed

        private void jLearningFactorMultipler2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLearningFactorMultipler2ActionPerformed
            // TODO add your handling code here:
        }//GEN-LAST:event_jLearningFactorMultipler2ActionPerformed

private void jGenerateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jGenerateMouseClicked
// TODO add your handling code here:
}//GEN-LAST:event_jGenerateMouseClicked

private void jGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGenerateActionPerformed
            String baseWordForm = jBaseForm.getText();
            String mark = jGrammaticalProperties.getText();
            try {
                analyser.setUseNeuralNetwork(jUseNeuralNetwork.isSelected());
                analyser.setUseBaseFormsDictionary(jUseBaseFormsDictionary.isSelected());
                GrammaticalProperties grammaticalProperties = analyser.getTagset().getGrammaticalProperties(mark);
                String generatedForm = analyser.generateWordForm(baseWordForm, grammaticalProperties);
                jGeneratedForm.setText(generatedForm);
            } catch (Throwable e) {
                e.printStackTrace();
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                e.printStackTrace(pw);
                pw.flush();
                jAnanlysisResult.setText(sw.toString());
                pw.close();
            }
    
}//GEN-LAST:event_jGenerateActionPerformed

private void jAnalyseMultilineTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAnalyseMultilineTextButtonActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jAnalyseMultilineTextButtonActionPerformed

private void jComboBoxFromStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFromStepActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_jComboBoxFromStepActionPerformed

        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MorphologyTestFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(MorphologyTestFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MorphologyTestFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MorphologyTestFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MorphologyTestFrame().setVisible(true);
            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAnalyseButton;
    private javax.swing.JButton jAnalyseMultilineTextButton;
    private javax.swing.JTextField jAnanlyserPath;
    private javax.swing.JTextArea jAnanlysisResult;
    private javax.swing.JTextArea jArchitectureDescription;
    private javax.swing.JTextArea jArchitectureName;
    private javax.swing.JTextField jBaseForm;
    private javax.swing.JButton jBuildButton;
    private javax.swing.JCheckBox jClassifyInputs;
    private javax.swing.JComboBox jComboBoxFromStep;
    private javax.swing.JComboBox jComboBoxToStep;
    private javax.swing.JTextArea jConsoleArea;
    private javax.swing.JTextField jDictionaryPath;
    private javax.swing.JButton jGenerate;
    private javax.swing.JTextField jGeneratedForm;
    private javax.swing.JTextField jGrammaticalProperties;
    private javax.swing.JButton jHypergraph;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JComboBox jLearningAlgorithm;
    private javax.swing.JTextField jLearningFactor;
    private javax.swing.JTextField jLearningFactorMultipler;
    private javax.swing.JTextField jLearningFactorMultipler2;
    private javax.swing.JTextField jLocale;
    private javax.swing.JTextField jMaxJumpFactor;
    private javax.swing.JTextField jMaximumNumberOfTrainingExamples;
    private javax.swing.JTextField jMimimumErrorValue;
    private javax.swing.JTextField jMomentuFactor;
    private javax.swing.JTextField jNumberOfEpochs;
    private javax.swing.JTextField jNumberOfTestExamples;
    private javax.swing.JButton jOpenAnanlyserButton;
    private javax.swing.JButton jOpenArchitecture;
    private javax.swing.JButton jOpenDirectoryButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JCheckBox jShowOnlyUncertainResults;
    private javax.swing.JTextArea jSourceText;
    private javax.swing.JLabel jSpeed;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTextArea jTextAnalysisResult;
    private javax.swing.JCheckBox jUseBaseFormsDictionary;
    private javax.swing.JCheckBox jUseNeuralNetwork;
    private javax.swing.JTextField jWeightsAmplitude;
    private javax.swing.JTextField jWordForm;
    // End of variables declaration//GEN-END:variables

}
